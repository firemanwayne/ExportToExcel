@typeparam TValue

<button type="button" @onclick="HandleExport" style="@CssStyle" class="@CssClass" title="@Title">@ButtonText</button>

@code{
    [Parameter] public string CssStyle { get; set; }

    [Parameter] public string CssClass { get; set; } = "btn btn-outline-success";

    [Parameter] public string Title { get; set; } = "Export To Excel";

    [Parameter] public object ButtonText { get; set; }

    [Parameter] public string ReportName { get; set; } = $"{DateTime.UtcNow:MMddyyyyhhmmss}";

    [Parameter] public HeaderStyle HeaderStyle { get; set; }

    [Parameter] public BodyStyle BodyStyle { get; set; }

    [Parameter] public Func<IEnumerable<TValue>> RequestDelegate { get; set; }

    [Parameter] public UploadFileEventHandler DownloadToBrowser { get; set; }

    [Inject] ExcelDownloadService DownloadService { get; set; }

    [Inject] IExportToExcel<TValue> ExcelService { get; set; }

    ExcelDocumentRequest<TValue> ExcelRequest { get; set; }   

    async void HandleExport()
    {
        if (RequestDelegate != null)
            await Export();
    }

    async Task Export()
    {
        try
        {
            var request = new ExcelDocumentRequest<TValue>(ReportName, RequestDelegate?.Invoke(), HeaderStyle, BodyStyle);

            var response = await ExcelService.ExportToExcel(request);

            await Download(response);

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    async Task Download(ExcelDocumentResponse response)
    {
        try
        {
            var r = await DownloadToBrowser?.Invoke(response);

            await DownloadService.ExportFile(r);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
}