@typeparam TValue

<h3>Header Style</h3>

<ExcelColorSelector OnColorSelected="HandleHeaderColorSelected" />

<ExcelHorizontalAlignmentSelector OnSelected="HandleHeaderHorizontalAlignmentSelected" />

<ExcelVerticalAlignmentSelector OnSelected="HandleHeaderVerticalAlignmentSelected" />

<br/>

<h3>Body Style</h3>

<ExcelColorSelector OnColorSelected="HandleBodyColorSelected" />

<ExcelHorizontalAlignmentSelector OnSelected="HandleBodyHorizontalAlignmentSelected" />

<ExcelVerticalAlignmentSelector OnSelected="HandleBodyVerticalAlignmentSelected" />

<button type="button"
        @onclick="HandleExport"
        style="@CssStyle"
        class="@CssClass"
        title="@Title">
    @ButtonText
    </button>

    @code{
        [Parameter] public string CssStyle { get; set; }

        [Parameter] public string CssClass { get; set; } = "btn btn-outline-success";

        [Parameter] public string Title { get; set; } = "Export To Excel";

        [Parameter] public object ButtonText { get; set; }

        [Parameter] public string ReportName { get; set; } = $"{DateTime.UtcNow:MMddyyyyhhmmss}";

        [Parameter] public Func<IEnumerable<TValue>> RequestDelegate { get; set; }

        [Inject] IExcelDownloadService DownloadService { get; set; }

        [Inject] IExportToExcel<TValue> ExcelService { get; set; }

        ExcelDocumentRequest<TValue> ExcelRequest { get; set; }

        HeaderStyle headerStyle = new HeaderStyle();
        BodyStyle bodyStyle = new BodyStyle();

        async void HandleExport()
        {
            if (RequestDelegate != null)
                await Export();
        }

        async Task Export()
        {
            try
            {
                var request = new ExcelDocumentRequest<TValue>(ReportName, RequestDelegate?.Invoke(), headerStyle, bodyStyle);

                var response = await ExcelService.ExportToExcel(request);

                await Download(response);

            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }

        async Task Download(ExcelDocumentResponse response)
        {
            try
            {
                var r = await ExportFile(response);

                await DownloadService.ExportFile(r);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }

        /// <summary>
        /// Andre' Rizzato's provided solution for downloading the excel spreadsheet to the browser
        /// </summary>
        /// <param name="excelDocument"></param>
        /// <returns></returns>
        Task<UploadResponse> ExportFile(ExcelDocumentResponse excelDocument)
        {
            var uploadFileLocalResponse = new UploadFileLocalResponse()
            {
                FileContent = Convert.ToBase64String(excelDocument.SpreadSheetBytes),
                ContentType = excelDocument.ContentType,
                FileName = excelDocument.FileName
            };

            return Task.FromResult((UploadResponse)uploadFileLocalResponse);
        }

        /// <summary>
        /// Header Style Handlers
        /// </summary>
        /// <param name="a"></param>
        void HandleHeaderColorSelected(StyleColorSelectedEventArgs a) => headerStyle.SetForegroundColor(a);
        void HandleHeaderVerticalAlignmentSelected(VerticalAlignmentChangedEventArgs a) => headerStyle.SetVerticalAlignment(a);
        void HandleHeaderHorizontalAlignmentSelected(HorizontalAlignmentChangedEventArgs a) => headerStyle.SetHorizontalAlignment(a);

        /// <summary>
        /// Body Style Handlers
        /// </summary>
        /// <param name="a"></param>
        void HandleBodyHorizontalAlignmentSelected(HorizontalAlignmentChangedEventArgs a) => bodyStyle.SetHorizontalAlignment(a);
        void HandleBodyColorSelected(StyleColorSelectedEventArgs a) => bodyStyle.SetForegroundColor(a);
        void HandleBodyVerticalAlignmentSelected(VerticalAlignmentChangedEventArgs a) => bodyStyle.SetVerticalAlignment(a);
    }